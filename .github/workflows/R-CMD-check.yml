name: R-CMD-check
on: 
  push:
    branches: [main, master, develop, release/*, feature/*, bugfix/*, fix/*]
  pull_request:
    branches: [main, master, develop, release/*, feature/*, bugfix/*, fix/*]

jobs:
  R-CMD-check:
    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes
      _R_CHECK_ASCII_CODE_: false
      _R_CHECK_ASCII_DATA_: false
      
    steps:
    - uses: actions/checkout@v4
    
    - uses: r-lib/actions/setup-r@v2
      with:
        r-version: 'release'
        use-public-rspm: true
    
    - uses: r-lib/actions/setup-pandoc@v2
    
    - name: Query dependencies
      run: |
        install.packages('remotes')
        saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
        writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
      shell: Rscript {0}

    - name: Cache R packages
      uses: actions/cache@v3
      with:
        path: ${{ env.R_LIBS_USER }}
        key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
        restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libcurl4-openssl-dev libxml2-dev libssl-dev
    
    - name: Install dependencies
      run: |
        remotes::install_deps(dependencies = TRUE)
        remotes::install_cran("rcmdcheck")
        remotes::install_cran("lintr")
      shell: Rscript {0}
    
    - name: Lint package (MUST PASS)
      run: |
        cat("üîç Running package linting checks...\n")
        lints <- lintr::lint_package()
        if (length(lints) > 0) {
          cat("‚ùå Linting failed! Issues found:\n")
          print(lints)
          stop("Linting failed. Fix all linting issues before merging.", call. = FALSE)
        } else {
          cat("‚úÖ Linting passed!\n")
        }
      shell: Rscript {0}
    
    # NOTE: Tests and coverage analysis are currently disabled
    # Uncomment the sections below when ready to enable testing
    
    # - name: Run package tests
    #   run: |
    #     cat("üß™ Running package tests...\n")
    #     if (!requireNamespace("testthat", quietly = TRUE)) {
    #       cat("‚ö†Ô∏è testthat not available - skipping tests\n")
    #     } else {
    #       test_results <- devtools::test()
    #       if (any(test_results$failed > 0)) {
    #         cat("‚ùå Tests failed!\n")
    #         stop("Tests failed. All tests must pass before merging.", call. = FALSE)
    #       } else {
    #         cat("‚úÖ All tests passed!\n")
    #       }
    #     }
    #   shell: Rscript {0}
    
    # - name: Check test coverage
    #   run: |
    #     cat("üìä Checking test coverage...\n")
    #     if (!requireNamespace("covr", quietly = TRUE)) {
    #       remotes::install_cran("covr")
    #     }
    #     coverage <- covr::package_coverage()
    #     coverage_percent <- covr::percent_coverage(coverage)
    #     cat("üìà Test coverage:", coverage_percent, "%\n")
    #     if (coverage_percent < 80) {
    #       cat("‚ö†Ô∏è Test coverage below 80%\n")
    #       # Uncomment line below to make coverage a blocking requirement
    #       # stop("Test coverage must be at least 80%. Current coverage: ", coverage_percent, "%")
    #     } else {
    #       cat("‚úÖ Test coverage meets requirements\n")
    #     }
    #   shell: Rscript {0}
    
    # Tests are skipped via --no-tests flag in check-r-package step below
    # Coverage analysis is not included in this workflow
    
    - name: Check package
      uses: r-lib/actions/check-r-package@v2
      with:
        args: 'c("--no-manual", "--no-tests", "--ignore-vignettes")'
        error-on: '"error"'
        check-dir: '"check"'
    
    - name: Upload check results
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: check-results
        path: check
